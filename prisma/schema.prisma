// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("prisma_DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String
  role          Role           @default(USER)
  isActive      Boolean        @default(true)
  twoFactorEnabled Boolean     @default(false)
  failedLoginAttempts Int      @default(0)
  lastFailedLogin DateTime?
  lockedUntil   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  demoRequests  DemoRequest[]
  watchedInfo   WatchedInfo[]
  userProducts  UserProduct[]
}

model DemoRequest {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  companyName   String
  companySize   String
  industry      String
  useCase       String
  contactPhone  String
  status        DemoStatus @default(PENDING)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  type      VerificationType
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, type, createdAt])
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String
  features      String[]
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  productInfoTypes ProductInfoType[]
  watchedInfo      WatchedInfo[]
  userProducts     UserProduct[]
}

model ProductInfoType {
  id        String   @id @default(cuid())
  productId String
  infoType  String   // Enum yerine string - daha esnek
  maxCount  Int      @default(1) // Maksimum kaç tane bu türden izlenebilir
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  product   Product  @relation(fields: [productId], references: [id])
  
  @@unique([productId, infoType])
}

model WatchedInfo {
  id        String   @id @default(cuid())
  userId    String
  productId String
  type      String   // Enum yerine string - daha esnek
  value     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  
  @@index([userId, productId, type])
}

model UserProduct {
  id        String   @id @default(cuid())
  userId    String
  productId String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
}

model Contact {
  id          String        @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  companyName String?
  phoneNumber String?
  message     String
  status      ContactStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum Role {
  USER
  ADMIN
  DEMO_USER
}

enum DemoStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VerificationType {
  EMAIL_VERIFY
  PASSWORD_RESET
  TWO_FACTOR
  PIN_VERIFY
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SPAM
}